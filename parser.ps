%!

% Stackbasierte Sprachen - WS 2010
%
% Matthias Tretter - 0726390
% Philip Messlehner -
% Perl Thomas - 0725603
%

% current known limitations:
%  * input-file must have an empty line at the end

% Ein simpler XML-Parser in PostScript

% Stack-Effekt-Kommentare haben die Form
% SE funtionsname: parameter1 parameter2 parameterX -- returnwert1 returnwert2 returnwertX

/debug true def

/printa {
    debug {
        print
    } {
        pop
    } ifelse
} def

/comment {
    debug {
        =
    } {
        pop
    } ifelse
} def


% Get name of last opened tag (based on dict stack)
% SE lastTagName: -- nameOfLastOpenedTag
/lastTagName {
    % assertion: currentdict only has one key!
    currentdict length 1 ne {
        (ERROR: Found dict with size != 1) =
        currentdict printDictionary
        quit
    } if

    % the following block runs only once, because
    % we have the assertion of length 1 above.
    currentdict {
        % forall gives: (key, value)
        pop % pop the value, leaves key on stack
    } forall

    100 string cvs % convert to string (+reserve memory)
} def


% Procedure to exclude Attribute
% SE prepareTag: tagWithAttributes -- tag
/prepareTag {
        (prepareTag) comment
        % Local variables dict has two entries (attributes + tagname)
	100 dict begin

        % Search for a single whitespace character
	( ) search { % then-branch of ifelse
                % Stack contents: post, match, pre
		exch
                % Stack contents: post, pre, match
		pop
                % Stack contents: post, pre
		exch
                % Stack contents: pre, post

		% save attributes (post) in variable
		/attributes exch def
	} { % else-branch of ifelse
                % Element has no attributes (store empty string)
		/attributes () def

                % Stack contents: tag name
	} ifelse

	% store pre (= name of tag) in variable
	/tagname exch def

        /newdict 100 dict def

        tagname tagOpen

	% store into new dictionary
	newdict begin
	    tagname attributes def % store tag on dictionary-stack
	end

        newdict % push newdict to operand stack

	end % 2 dict (lokale variablen)

        begin % pop top of operand stack (= newdict) + push on dict stack
} def

% Procedure to handle End-Tag
% SE handleEndTag: endTag --
/handleEndTag {
        dup (') exch (handleEndTag: ') printa printa comment

        currentdict % push top of dict stack to operand stack

	10 dict begin
           /lastdict exch def
           /endTag exch def

           % should the top-of-dict be droppped? (default yes)
           /dropTag true def

           % is "endTag" in the last opened dict?
           lastdict endTag known {
               (found on top) comment
           } { % else
               endTag where {
                   /founddict exch def
                   (found somewhere) comment
               } { % else
                   /dropTag false def
                   (not found) comment
               } ifelse
           } ifelse

           endTag % for the check
           dropTag % for the if (-> is a boolean already)
	end % 1 dict

        {
            (drop until tag found) comment
            % here: endTag on top of stack
            {
                dup currentdict exch known {
                    (found on top) comment
                    % endtag is on currentdict
                    lastTagName tagClose
                    end
                    exit
                } { % else
                    (still not found) comment
                    lastTagName tagClose
                    end
                } ifelse
            } loop
        } {
            (ignoring end tag) comment
            dup tagIgnore
        } ifelse % if droptag, "pop from dict stack"

        % here: endTag still on top of stack -> pop
        pop
} def

% Define Procedure for handling SearchTerm
% SE analyzeSearchResult: pre --
/analyzeSearchResult {
	% searching for '</' in pre 	(SE search: string -- post match pre true
    %                                        OR string -- false)
	(</) search {
		% EndTag Found
		pop		% pop pre (Text before Tag begins)
		pop		% pop '</'
		handleEndTag
	} % if-path search
	{ % else-path search
		(<) search { % search for BeginTag
			pop		% pop pre (Text before Tag begins)
			pop		% pop '<'

			prepareTag
		}
		{
			pop
		} ifelse
	} ifelse
} def

% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% UNUSED
% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% prints a dictionary
% SE printDictionary dictionary  –-
/printDictionary { %def
	(\nDictionary: \n) print
	{ %forall
            % name value
            exch
            (=>)
            exch
            = print =
    } forall
} bind def

% prints the top of a dictionary
% SE printDictionary dictionary  –-
/printDictionaryTop { %def
	(\nDictionary Top: \n) print
	{ %forall
		exch % name first
	    (key: ) print ==
	    %( = ) print
	    (val: ) print ==
		exit
    } forall
} bind def

% Reads the path to a file from stdin
% SE readPathToInputFile:  -- path
/readPathToInputFile {
    % TODO: comment out, hardcoded for testing-purposes
	(Pfad zur XML-Datei: ) print flush
    (%stdin) (r) file 100 string readline pop
%	(input/valid2.xml)
} def

% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% UNUSED
% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


% SE: tagname attributes --
/tagOpen {
    (') exch (XX Opening: ') printa printa comment
    % FIXME: Output opening tag
} def

% SE: data --
/tagData {
    (') exch (XX Data: ') printa printa comment
    % FIXME: Output "normal" text
} def

% SE: comment --
/tagComment {
    (') exch (XX Comment: ') printa printa comment
    % FIXME: Output comment-style text
} def

% SE: picontent --
/tagPI {
    (') exch (XX Processing instruction:') printa printa comment
    % FIXME: Output <? ... ?> with the right colors
} def

% SE: tagName --
/tagIgnore {
    (') exch (XX Ignoring closing tag: ') printa printa comment
    % FIXME: Output closing tag as "strikethrough"
} def

% SE: tagName --
/tagClose {
    (') exch (XX Closing: ') printa printa comment
    % FIXME: Output closing tag
} def

/sentinelKey (itsTheEndOfTheDoc) def

/sentinelOpen {
    /sentinel 1 dict def
    sentinel begin
    sentinelKey (..as we know it) def
} def

/sentinelClose {
    % dictstack abbauen, bis sentinel gefunden
    {
        currentdict sentinelKey known {
            exit
        } if

        lastTagName tagClose
        end
    } loop

    end  % end sentinel
} def

% SE: --
/checkCLIParams {
    1 dict begin
        % SE: [list of parameters] --
        /requireParameters {
            {
                dup systemdict exch known not {
                    (Missing parameter: -d) print =
                    quit
                } if
            } forall
        } def

        % List all required parameters here
        [
            (inputFilename)
        ] requireParameters
    end
} def

% Main-Procedure
% SE main:  --
/main {
        /locals 100 dict def

        checkCLIParams

        locals begin
        /buffer 128 string def				%setup buffer for readline

        sentinelOpen
	currentfile buffer readline

        locals begin
            /input inputFilename (r) file def
        end

	{ % start loop
                locals begin
                    /buffer 128 string def				%setup buffer for readline
                end

		% reading one line (SE readline: input buffer -- string bool)
		input buffer readline {
			{ %start loop for multiple tags in one line
				% searching for '>'	(SE search: string -- post match pre true
		    		%                            OR string -- false)
					(>) search {
						analyzeSearchResult
						pop		% pop match ( > Sign )
					} % if-path
					{ % else-path (search)
						pop						% pops string of search command
						exit					% and exits loop
					} ifelse
			} loop
		}
		{ % else-path (readline)
			pop		% pops string for readline command
			exit	% and exits loop
		} ifelse
	} loop

	% close File
	input closefile

    sentinelClose

    end % end of locals

    quit

} def

% call main-procedure
main
% make object executable
